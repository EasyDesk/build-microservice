name: Microservice Continuous Integration

on:
  workflow_call:
    inputs:
      dotnet-version:
        type: string
        required: true
      warnings-as-errors:
        type: boolean
        required: false
        default: false
      main-project:
        type: string
        required: true
      unit-tests-project:
        type: string
        required: true
      integration-tests-project:
        type: string
        required: false
        default: ''
      publish-dir:
        type: string
        required: false
        default: app
      sql-script-name:
        type: string
        required: false
        default: update-database.sql
      artifact-name:
        type: string
        required: false
        default: build-artifacts
      release-prefix:
        type: string
        required: false
        default: ${{ github.repository }}
      dockerfile:
        type: string
        required: false
        default: ''
      image-name:
        type: string
        required: false
        default: ${{ github.repository }}
      docker-username:
        type: string
        required: false
        default: ${{ github.repository_owner }}
    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}
      released:
        value: ${{ jobs.release.outputs.released == 'true' }}

jobs:
  build:
    name: Build Microservice
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: out
    outputs:
      version: ${{ steps.semver.outputs.version }}
      should-release: ${{ steps.semver.outputs.should-release }}
      is-prerelease: ${{ steps.semver.outputs.is-github-prerelease }}
      major: ${{ steps.semver.outputs.major }}
      minor: ${{ steps.semver.outputs.minor }}
      patch: ${{ steps.semver.outputs.patch }}
    steps:
      - id: semver
        name: Checkout
        uses: EasyDesk/action-semver-checkout@v1
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Build
        uses: EasyDesk/action-dotnet-build@v1
        with:
          warnings-as-errors: ${{ inputs.warnings-as-errors }}
      - name: Run Unit Tests
        uses: EasyDesk/action-dotnet-test@v1
        with:
          path: ${{ inputs.unit-tests-project }}
      - name: Run Integration Tests
        uses: EasyDesk/action-dotnet-test@v1
        if: inputs.integration-tests-project != ''
        with:
          path: ${{ inputs.integration-tests-project }}
      - name: Generate database script
        uses: EasyDesk/action-generate-migrations-script@v1
        with:
          project-dir: ${{ inputs.main-project-versionname }}
          output-file: ${{ env.OUTPUT_DIR }}/${{ inputs.sql-script-name }}
      - name: Publish
        uses: EasyDesk/action-dotnet-publish@v1
        with:
          path: ${{ inputs.main-project }}
          output-dir: ${{ env.OUTPUT_DIR }}/${{ inputs.publish-dir }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ env.OUTPUT_DIR }}
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: inputs.docker-compose-file != ''
    needs: [build]
    concurrency: docker-push
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            localhost:5000/${{ inputs.docker-username }}/${{ inputs.image-name }}
          tags: |
            type=edge
            type=raw,value=${{ needs.build.outputs.version }},enable=${{ needs.build.outputs.should-release == 'true' }}
            type=raw,value=${{ needs.build.outputs.major }}.${{ needs.build.outputs.minor }},enable=${{ needs.build.outputs.should-release == 'true' }}
            type=raw,value=${{ needs.build.outputs.major }},enable=${{ needs.build.outputs.should-release == 'true' }}
          labels: |
            maintainer=${{ inputs.docker-username }}
            org.opencontainers.image.title=${{ inputs.main-project }}
          flavor: |
            latest=${{ needs.build.outputs.should-release == 'true' }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          no-cache: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Inspect
        run: |
          curl -X GET https://localhost:5000/v2/_catalog
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.build.outputs.should-release == 'true'
    outputs:
      released: ${{ steps.release-notification.outputs.released }}
    concurrency: release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
      - name: Zip build assets
        env:
          ZIP_OUTPUT_NAME: ${{ inputs.release-prefix }}_${{ needs.build.outputs.version }}
        run: zip -r "${ZIP_OUTPUT_NAME//\//_}.zip" '${{ inputs.publish-dir }}'/*
      - name: Release
        uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.build.outputs.version }}
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          prefix: ${{ inputs.release-prefix }}
          files: |
            ${{ inputs.sql-script-name }}
            *.zip
      - name: Notify release
        id: release-notification
        run: |
          echo '{released}={true}' >> $GITHUB_OUTPUT
