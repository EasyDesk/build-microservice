name: Microservice Continuous Integration

on:
  workflow_call:
    inputs:
      dotnet-version:
        type: string
        required: true
      warnings-as-errors:
        type: boolean
        required: false
        default: false
      unit-tests-project:
        type: string
        required: false
        default: ''
      integration-tests-project:
        type: string
        required: false
        default: ''
      artifact-name:
        type: string
        required: false
        default: build-artifacts
      release-prefix:
        type: string
        required: false
        default: ${{ github.repository }}
      main-project:
        type: string
        required: true
      dockerfile:
        type: string
        required: false
      image-name:
        type: string
        required: false
        default: ${{ github.repository }}
      docker-username:
        type: string
        required: false
        default: ${{ github.repository_owner }}
      registry-url:
        type: string
        required: false
        default: ghcr.io
    secrets:
      docker-password:
        required: false
    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}
      released:
        value: ${{ jobs.release.outputs.released == 'true' }}

jobs:
  build:
    name: Build Microservice
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
      should-release: ${{ steps.semver.outputs.should-release }}
      is-prerelease: ${{ steps.semver.outputs.is-github-prerelease }}
      major: ${{ steps.semver.outputs.major }}
      minor: ${{ steps.semver.outputs.minor }}
      patch: ${{ steps.semver.outputs.patch }}
    steps:
      - id: semver
        name: Checkout
        uses: EasyDesk/action-semver-checkout@v1
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Build
        uses: EasyDesk/action-dotnet-build@v1
        with:
          warnings-as-errors: ${{ inputs.warnings-as-errors }}
      - name: Run Unit Tests
        uses: EasyDesk/action-dotnet-test@v1
        if: inputs.unit-tests-project != ''
        with:
          path: ${{ inputs.unit-tests-project }}
      - name: Run Integration Tests
        uses: EasyDesk/action-dotnet-test@v1
        if: inputs.integration-tests-project != ''
        with:
          path: ${{ inputs.integration-tests-project }}
  docker-build:
    name: Build Docker Images
    needs: [build]
    if: ${{ inputs.dockerfile != '' }}
    strategy:
      matrix:
        include:
          - dockerfile: ${{ inputs.dockerfile }}
            image-name: ${{ inputs.image-name }}
    uses: ./.github/workflows/docker-delivery.yml
    with:
      dockerfile: ${{ matrix.dockerfile }}
      image-name: ${{ matrix.image-name }}
      docker-username: ${{ inputs.docker-username }}
      registry-url: ${{ inputs.registry-url }}
    secrets:
      docker-password: ${{ secrets.docker-password }}
  publish:
    name: Publish Artifacts
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: out
    needs: [build]
    strategy:
      matrix:
        project-name:
          - ${{ inputs.main-project }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Build
        uses: EasyDesk/action-dotnet-build@v1
        with:
          warnings-as-errors: ${{ inputs.warnings-as-errors }}
      - name: Publish
        uses: EasyDesk/action-dotnet-publish@v1
        with:
          path: ${{ matrix.project-name }}
          output-dir: ${{ env.OUTPUT_DIR }}
      - id: artifact
        name: Compute artifact name
        run: |
          ARTIFACT_NAME="${{ inputs.artifact-name }}_${{ matrix.project-name }}_${{ needs.build.outputs.version }}"
          echo "{name}={${ARTIFACT_NAME//\//_}}" | tee $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ env.OUTPUT_DIR }}
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: needs.build.outputs.should-release == 'true'
    outputs:
      released: ${{ steps.release-notification.outputs.released }}
    concurrency: release
    defaults:
      run:
        shell: bash
    env:
      PATH_TO_ARTIFACTS: publish
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: ${{ env.PATH_TO_ARTIFACTS }}
      - name: Zip build assets
        env:
          ZIP_OUTPUT_NAME: ${{ inputs.release-prefix }}_${{ needs.build.outputs.version }}
        run: zip -r "${ZIP_OUTPUT_NAME//\//_}.zip" "${PATH_TO_ARTIFACTS}"/*
      - name: Release
        uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.build.outputs.version }}
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          prefix: ${{ inputs.release-prefix }}
          files: |
            ${{ inputs.sql-script-name }}
            *.zip
      - name: Notify release
        id: release-notification
        run: |
          echo '{released}={true}' >> $GITHUB_OUTPUT
